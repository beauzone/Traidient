Key Principles for Designing the UX Flow for Beginner-to-Intermediate Traders
For your target audience, we should prioritize:
✅ Clarity — Clear labels, simple language, and intuitive grouping
✅ Guidance — Step-by-step flows, wizards, and tooltips for guidance
✅ Automation — Reduce manual steps wherever possible
✅ Separation of Complexity — Advanced features should be accessible but not forced on beginners

With that in mind, here’s what I recommend:

🏗️ Recommended App Structure & UX Flow
Here’s how I would structure the app for maximum clarity and simplicity while still giving experienced traders flexibility.

1️⃣ Strategies
💬 "Where users define the trading logic"

Core Functionality:
✅ Entry conditions
✅ Exit conditions
✅ Stop loss, take profit, and trailing stop logic
✅ Position sizing rules
✅ Risk management settings

🔹 Key UX Design Decisions:
Treat Screeners as an optional feature within the strategy builder.

Provide a simple dropdown that asks:

"How would you like to define your trade universe?"
✅ Fixed List of Assets (users manually enter ticker symbols)
✅ Dynamic Screener (users define screener logic to auto-generate the trade universe)

Why Include Screeners Inside the Strategy Builder?
✅ It's easier for beginners to understand — the screener is simply a tool to “feed” assets into a strategy.
✅ It keeps the user focused on building one cohesive strategy, rather than jumping between modules.
✅ It reinforces that the screener logic is part of the strategy rather than a separate feature.

2️⃣ Screeners (As an Optional Standalone Module)
💬 "For users who want to build custom screeners for other purposes"

Even though I recommend embedding screeners inside the Strategy Builder, I’d still provide a Screener Module as a standalone feature. This lets experienced users build powerful, multi-use screeners — e.g., to monitor specific stocks or identify interesting setups outside of automated strategies.

Key Use Cases for a Separate Screener Module:
✅ Users who want to explore potential trades manually.
✅ Users who want to monitor certain conditions in the market without automating trades.
✅ Users who may want to build multiple strategies that all pull from the same screener logic.

Bonus Idea: Let users “link” a standalone screener to a strategy — so they can choose between:
✅ A custom screener embedded in the strategy
✅ A pre-built screener from the Screener Module

3️⃣ Backtesting
💬 "Where users validate and optimize their strategies"

Core Functionality:
✅ Run historical data tests on strategies
✅ Display key performance metrics (e.g., Sharpe ratio, max drawdown, profit factor)
✅ Visualize entry/exit points on historical charts

Key UX Design Decisions:

Users should be able to backtest strategies directly from the Strategy Builder.

The Backtesting Module itself should act as a "Test Center" — a dedicated area where users can:
✅ Select a strategy
✅ Select a custom time range
✅ Run multiple backtests and compare results side-by-side

Bonus Idea: Show a simple “scorecard” with key performance metrics (e.g., ✅ Wins/Losses, ✅ Risk-Reward Ratio, etc.) for easy interpretation by non-technical users.

4️⃣ Bots (Deployment & Automation)
💬 "Where users deploy, manage, and monitor live strategies"

Core Functionality:
✅ Link the bot to a pre-built strategy
✅ Assign capital allocation and max risk
✅ Set trade frequency (e.g., 5 min, 1 hour, daily)
✅ Monitor live trades and performance

Key UX Design Decisions:

Clearly separate Strategy Logic from Bot Configuration to simplify the mental model:

"The Strategy is your trading plan — the Bot is how you deploy it."

Add clear, guided steps for:
✅ Choosing a strategy
✅ Setting capital limits
✅ Configuring notifications (e.g., email or app alerts for trades)

5️⃣ Live Trading Monitor
💬 "Where users can see active trades, bot status, and performance in real-time"

Core Features:
✅ Overview of active bots
✅ Visual trade logs with timestamps
✅ P/L tracking with key risk metrics
✅ Alerts for failed orders, signal mismatches, etc.

6️⃣ Configuration & Settings
💬 "Where users manage accounts, API keys, and broker connections"

Key UX Design Decisions:

Provide clear status indicators for connected accounts (e.g., ✅ “Connected” or ❌ “Disconnected”)

Add inline instructions and FAQs to help beginners set up their accounts.

🔄 Recommended User Flow
Here’s how I’d suggest structuring the app’s primary flow to create a seamless experience for your users:

1️⃣ Create Strategy → Add Screener (Optional) → Backtest Strategy
2️⃣ If Backtest is Successful → Deploy Bot → Monitor in Live Trading
3️⃣ Manage Active Bots → Track Performance → Refine Strategy Over Time

This flow emphasizes simplicity:
✅ Users stay focused on a clear step-by-step journey
✅ Advanced features are there — but only when users are ready to explore them
✅ Experienced users can skip directly to advanced tools like custom screeners or bot deployment

🚀 Summary — Key Design Principles for Your App
✅ Embed the Screener as a Feature Inside the Strategy Builder to simplify the flow for new users.
✅ Provide a Standalone Screener Module for experienced users who want deeper flexibility.
✅ Ensure the Backtesting Flow feels integrated — users shouldn’t feel like they’re jumping to a separate area to validate their strategies.
✅ Clearly separate the concepts of "Strategy Logic" and "Bot Configuration" — this mental clarity will drastically improve ease of use.