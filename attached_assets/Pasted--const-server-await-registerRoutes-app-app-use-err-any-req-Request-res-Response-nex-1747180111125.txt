  const server = await registerRoutes(app);

  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";

    res.status(status).json({ message });
    throw err;
  });
  const server = await registerRoutes(app);

  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";

    res.status(status).json({ message });
    console.error('Error:', err); // Log error instead of throwing
  });
  // ALWAYS serve the app on port 5000
  // this serves both the API and the client.
  // This is the port that Replit workflow system expects
  const port = 5000;
  server.listen({
    port,
    host: "0.0.0.0",
    reusePort: true,
  }, () => {
    log(`serving on port ${port}`);
  });
  // ALWAYS serve the app on port 5000
  // this serves both the API and the client.
  // This is the port that Replit workflow system expects
  const port = process.env.PORT || 5000;
  server.listen({
    port,
    host: "0.0.0.0",
  }, () => {
    log(`serving on port ${port}`);
  });
  // Initialize Python environment for screeners
  try {
    const { initPythonEnvironment } = await import('./pythonExecutionService');
    log('Initializing Python environment for screeners...');
    await initPythonEnvironment();
    log('Python environment initialized successfully');
  } catch (error) {
    log(`Warning: Failed to initialize Python environment: ${error instanceof Error ? error.message : String(error)}`);
    log('Stock screeners requiring Python may not work properly');
  }
  // Initialize Python environment for screeners
  try {
    const { initPythonEnvironment } = await import('./pythonExecutionService');
    log('Initializing Python environment for screeners...');
    await initPythonEnvironment().catch(err => {
      log(`Warning: Python environment initialization rejected: ${err instanceof Error ? err.message : String(err)}`);
    });
    log('Python environment initialized successfully');
  } catch (error) {
    log(`Warning: Failed to initialize Python environment: ${error instanceof Error ? error.message : String(error)}`);
    log('Stock screeners requiring Python may not work properly');
  }
[deployment]
deploymentTarget = "gce"
run = ["npm", "run", "start"]
build = ["npm", "run", "build"]
[deployment]
deploymentTarget = "gce"
run = ["npm", "run", "start"]
build = ["npm", "run", "build"]
ignoreRun = true