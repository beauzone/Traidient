Promotion failed
Your deployment attempt had the following errors:
The server is not listening on port 5000 as configured in the port forwarding
The application might be exiting due to missing environment variables needed by Python services
The server is listening on process.env.PORT which may not be set
Assistant suggestions
  // Use port 5000 consistently across both development and production
  // Replit will handle the forwarding to external port 80
  const port = process.env.PORT || 5000;
  server.listen({
    port: Number(port),
    host: "0.0.0.0",
  }, () => {
    log(`serving on port ${port}`);
  });
  // Always use port 5000 for production deployment
  const port = 5000;
  server.listen({
    port,
    host: "0.0.0.0",
  }, () => {
    log(`serving on port ${port}`);
  });
[[ports]]
localPort = 5000
externalPort = 80
[[ports]]
localPort = 5000
externalPort = 80
protocol = "http"
Ensure all required environment variables are set in the Secrets tab for your deployment. Based on the code, you need: ALPACA_API_KEY, ALPACA_API_SECRET, POLYGON_API_KEY and other API keys referenced in the pythonExecutionService.ts file.
  try {
    const { initPythonEnvironment } = await import('./pythonExecutionService');
    log('Initializing Python environment for screeners...');
    
    // Use a timeout to prevent hanging during deployment
    const pythonInitTimeout = setTimeout(() => {
      log('Python initialization timed out after 10 seconds, continuing startup');
    }, 10000);
    
    try {
      await Promise.race([
        initPythonEnvironment(),
        new Promise(resolve => setTimeout(() => {
          log('Python initialization timeout safety resolved');
          resolve(null);
        }, 8000))
      ]);
      log('Python environment initialized successfully');
    } catch (err) {
      log(`Warning: Python environment initialization rejected: ${err instanceof Error ? err.message : String(err)}`);
      log('Continuing with limited Python functionality');
    } finally {
      clearTimeout(pythonInitTimeout);
    }
  try {
    const { initPythonEnvironment } = await import('./pythonExecutionService');
    log('Initializing Python environment for screeners...');
    
    // Use a timeout to prevent hanging during deployment
    const pythonInitTimeout = setTimeout(() => {
      log('Python initialization timed out after 10 seconds, continuing startup');
    }, 10000);
    
    try {
      await Promise.race([
        initPythonEnvironment().catch(e => {
          log(`Python initialization error caught: ${e instanceof Error ? e.message : String(e)}`);
          return null; // Prevent rejection from stopping server startup
        }),
        new Promise(resolve => setTimeout(() => {
          log('Python initialization timeout safety resolved');
          resolve(null);
        }, 8000))
      ]);
      log('Python environment initialization completed');
    } catch (err) {
      log(`Warning: Python environment initialization rejected: ${err instanceof Error ? err.message : String(err)}`);
      log('Continuing with limited Python functionality');
    } finally {
      clearTimeout(pythonInitTimeout);
    }
[env]
[env]
REPLIT_DISABLE_PACKAGE_LAYER = "1"